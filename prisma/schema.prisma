generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Commit {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updateAt           DateTime @updatedAt
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  Project            Project  @relation(fields: [projectId], references: [id])
}

model Project {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updateAt            DateTime              @updatedAt
  name                String
  githubUrl           String
  deletedAt           DateTime?
  Commit              Commit[]
  SavedQuestion            Question[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  UserToProject       UserToProject[]

  meetings Meeting[]
}

model Question {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt
  question       String
  answer         String
  fileReferences Json?
  projectId      String
  userId         String
  Project        Project  @relation(fields: [projectId], references: [id])
  User           User     @relation(fields: [userId], references: [id])
}

model SourceCodeEmbedding {
  id               String                  @id @default(cuid())
  summaryEmbedding Unsupported("vector")?  
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  Project          Project                 @relation(fields: [projectId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  imageUrl      String?
  firstName     String?
  lastName      String?
  emailAddress  String          @unique
  credits       Int             @default(150)
  QuestionAsked      Question[]
  UserToProject UserToProject[]
  StripeTransactions StripeTransaction[]

}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    String
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Meeting{
  id String @id  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name String
  meetingUrl String
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id])
  status MeetingStatus @default(PROCESSING)
  issues Issue[]
}

model Issue{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
 
  start String
  end String
  gist  String
  headline String
  Summary String
  meetingId String
  meeting Meeting @relation(fields: [meetingId], references: [id]) 
}
enum  MeetingStatus{
  PROCESSING
  COMPLETED
  FAILED
}


model StripeTransaction{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) 
  userId String
  user User @relation(fields: [userId], references: [id])
  credits Int
  
}